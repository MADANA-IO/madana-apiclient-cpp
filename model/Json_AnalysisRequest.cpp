/**
 * madana-api
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Json_AnalysisRequest.h"

namespace com {
namespace madana {
namespace client {
namespace model {




Json_AnalysisRequest::Json_AnalysisRequest()
{
    m_TokenAmount = utility::conversions::to_string_t("");
    m_TokenAmountIsSet = false;
    m_Treshold = utility::conversions::to_string_t("");
    m_TresholdIsSet = false;
    m_DataCollectionMethod = utility::conversions::to_string_t("");
    m_DataCollectionMethodIsSet = false;
    m_DataCollectionConfig = utility::conversions::to_string_t("");
    m_DataCollectionConfigIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
}

Json_AnalysisRequest::~Json_AnalysisRequest()
{
}

void Json_AnalysisRequest::validate()
{
    // TODO: implement validation
}

web::json::value Json_AnalysisRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TokenAmountIsSet)
    {
        val[utility::conversions::to_string_t("tokenAmount")] = ModelBase::toJson(m_TokenAmount);
    }
    if(m_TresholdIsSet)
    {
        val[utility::conversions::to_string_t("treshold")] = ModelBase::toJson(m_Treshold);
    }
    if(m_DataCollectionMethodIsSet)
    {
        val[utility::conversions::to_string_t("dataCollectionMethod")] = ModelBase::toJson(m_DataCollectionMethod);
    }
    if(m_DataCollectionConfigIsSet)
    {
        val[utility::conversions::to_string_t("dataCollectionConfig")] = ModelBase::toJson(m_DataCollectionConfig);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }

    return val;
}

bool Json_AnalysisRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("tokenAmount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tokenAmount"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_tokenAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_tokenAmount);
            setTokenAmount(refVal_tokenAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("treshold")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("treshold"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_treshold;
            ok &= ModelBase::fromJson(fieldValue, refVal_treshold);
            setTreshold(refVal_treshold);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dataCollectionMethod")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dataCollectionMethod"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dataCollectionMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataCollectionMethod);
            setDataCollectionMethod(refVal_dataCollectionMethod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dataCollectionConfig")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dataCollectionConfig"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dataCollectionConfig;
            ok &= ModelBase::fromJson(fieldValue, refVal_dataCollectionConfig);
            setDataCollectionConfig(refVal_dataCollectionConfig);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    return ok;
}

void Json_AnalysisRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TokenAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tokenAmount"), m_TokenAmount));
    }
    if(m_TresholdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("treshold"), m_Treshold));
    }
    if(m_DataCollectionMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dataCollectionMethod"), m_DataCollectionMethod));
    }
    if(m_DataCollectionConfigIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dataCollectionConfig"), m_DataCollectionConfig));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
}

bool Json_AnalysisRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("tokenAmount")))
    {
        utility::string_t refVal_tokenAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tokenAmount")), refVal_tokenAmount );
        setTokenAmount(refVal_tokenAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("treshold")))
    {
        utility::string_t refVal_treshold;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("treshold")), refVal_treshold );
        setTreshold(refVal_treshold);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataCollectionMethod")))
    {
        utility::string_t refVal_dataCollectionMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dataCollectionMethod")), refVal_dataCollectionMethod );
        setDataCollectionMethod(refVal_dataCollectionMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataCollectionConfig")))
    {
        utility::string_t refVal_dataCollectionConfig;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dataCollectionConfig")), refVal_dataCollectionConfig );
        setDataCollectionConfig(refVal_dataCollectionConfig);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    return ok;
}

utility::string_t Json_AnalysisRequest::getTokenAmount() const
{
    return m_TokenAmount;
}

void Json_AnalysisRequest::setTokenAmount(const utility::string_t& value)
{
    m_TokenAmount = value;
    m_TokenAmountIsSet = true;
}

bool Json_AnalysisRequest::tokenAmountIsSet() const
{
    return m_TokenAmountIsSet;
}

void Json_AnalysisRequest::unsetTokenAmount()
{
    m_TokenAmountIsSet = false;
}
utility::string_t Json_AnalysisRequest::getTreshold() const
{
    return m_Treshold;
}

void Json_AnalysisRequest::setTreshold(const utility::string_t& value)
{
    m_Treshold = value;
    m_TresholdIsSet = true;
}

bool Json_AnalysisRequest::tresholdIsSet() const
{
    return m_TresholdIsSet;
}

void Json_AnalysisRequest::unsetTreshold()
{
    m_TresholdIsSet = false;
}
utility::string_t Json_AnalysisRequest::getDataCollectionMethod() const
{
    return m_DataCollectionMethod;
}

void Json_AnalysisRequest::setDataCollectionMethod(const utility::string_t& value)
{
    m_DataCollectionMethod = value;
    m_DataCollectionMethodIsSet = true;
}

bool Json_AnalysisRequest::dataCollectionMethodIsSet() const
{
    return m_DataCollectionMethodIsSet;
}

void Json_AnalysisRequest::unsetDataCollectionMethod()
{
    m_DataCollectionMethodIsSet = false;
}
utility::string_t Json_AnalysisRequest::getDataCollectionConfig() const
{
    return m_DataCollectionConfig;
}

void Json_AnalysisRequest::setDataCollectionConfig(const utility::string_t& value)
{
    m_DataCollectionConfig = value;
    m_DataCollectionConfigIsSet = true;
}

bool Json_AnalysisRequest::dataCollectionConfigIsSet() const
{
    return m_DataCollectionConfigIsSet;
}

void Json_AnalysisRequest::unsetDataCollectionConfig()
{
    m_DataCollectionConfigIsSet = false;
}
utility::string_t Json_AnalysisRequest::getDescription() const
{
    return m_Description;
}

void Json_AnalysisRequest::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Json_AnalysisRequest::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Json_AnalysisRequest::unsetDescription()
{
    m_DescriptionIsSet = false;
}
}
}
}
}


