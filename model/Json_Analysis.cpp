/**
 * madana-api
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Json_Analysis.h"

namespace com {
namespace madana {
namespace client {
namespace model {




Json_Analysis::Json_Analysis()
{
    m_Created = utility::conversions::to_string_t("");
    m_CreatedIsSet = false;
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Agent = utility::conversions::to_string_t("");
    m_AgentIsSet = false;
    m_DatasetsIsSet = false;
    m_ParticipantsIsSet = false;
    m_Views = utility::conversions::to_string_t("");
    m_ViewsIsSet = false;
    m_ActionsIsSet = false;
    m_Creator = utility::conversions::to_string_t("");
    m_CreatorIsSet = false;
    m_DatasetCount = utility::conversions::to_string_t("");
    m_DatasetCountIsSet = false;
}

Json_Analysis::~Json_Analysis()
{
}

void Json_Analysis::validate()
{
    // TODO: implement validation
}

web::json::value Json_Analysis::toJson() const
{
    web::json::value val = this->Json_AnalysisRequest::toJson();
    
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t("uuid")] = ModelBase::toJson(m_Uuid);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_AgentIsSet)
    {
        val[utility::conversions::to_string_t("agent")] = ModelBase::toJson(m_Agent);
    }
    if(m_DatasetsIsSet)
    {
        val[utility::conversions::to_string_t("datasets")] = ModelBase::toJson(m_Datasets);
    }
    if(m_ParticipantsIsSet)
    {
        val[utility::conversions::to_string_t("participants")] = ModelBase::toJson(m_Participants);
    }
    if(m_ViewsIsSet)
    {
        val[utility::conversions::to_string_t("views")] = ModelBase::toJson(m_Views);
    }
    if(m_ActionsIsSet)
    {
        val[utility::conversions::to_string_t("actions")] = ModelBase::toJson(m_Actions);
    }
    if(m_CreatorIsSet)
    {
        val[utility::conversions::to_string_t("creator")] = ModelBase::toJson(m_Creator);
    }
    if(m_DatasetCountIsSet)
    {
        val[utility::conversions::to_string_t("datasetCount")] = ModelBase::toJson(m_DatasetCount);
    }

    return val;
}

bool Json_Analysis::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->Json_AnalysisRequest::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("created"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_created;
            ok &= ModelBase::fromJson(fieldValue, refVal_created);
            setCreated(refVal_created);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uuid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uuid"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_uuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_uuid);
            setUuid(refVal_uuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("agent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("agent"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_agent;
            ok &= ModelBase::fromJson(fieldValue, refVal_agent);
            setAgent(refVal_agent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("datasets")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("datasets"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Json_DatasetInfo>> refVal_datasets;
            ok &= ModelBase::fromJson(fieldValue, refVal_datasets);
            setDatasets(refVal_datasets);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("participants")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("participants"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_participants;
            ok &= ModelBase::fromJson(fieldValue, refVal_participants);
            setParticipants(refVal_participants);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("views")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("views"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_views;
            ok &= ModelBase::fromJson(fieldValue, refVal_views);
            setViews(refVal_views);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("actions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("actions"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Json_AnalysisRequestAction>> refVal_actions;
            ok &= ModelBase::fromJson(fieldValue, refVal_actions);
            setActions(refVal_actions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("creator")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("creator"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_creator;
            ok &= ModelBase::fromJson(fieldValue, refVal_creator);
            setCreator(refVal_creator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("datasetCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("datasetCount"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_datasetCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_datasetCount);
            setDatasetCount(refVal_datasetCount);
        }
    }
    return ok;
}

void Json_Analysis::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TokenAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tokenAmount"), m_TokenAmount));
    }
    if(m_TresholdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("treshold"), m_Treshold));
    }
    if(m_DataCollectionMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dataCollectionMethod"), m_DataCollectionMethod));
    }
    if(m_DataCollectionConfigIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dataCollectionConfig"), m_DataCollectionConfig));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uuid"), m_Uuid));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
    if(m_AgentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("agent"), m_Agent));
    }
    if(m_DatasetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("datasets"), m_Datasets));
    }
    if(m_ParticipantsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("participants"), m_Participants));
    }
    if(m_ViewsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("views"), m_Views));
    }
    if(m_ActionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("actions"), m_Actions));
    }
    if(m_CreatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("creator"), m_Creator));
    }
    if(m_DatasetCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("datasetCount"), m_DatasetCount));
    }
}

bool Json_Analysis::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("tokenAmount")))
    {
        utility::string_t refVal_tokenAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tokenAmount")), refVal_tokenAmount );
        setTokenAmount(refVal_tokenAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("treshold")))
    {
        utility::string_t refVal_treshold;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("treshold")), refVal_treshold );
        setTreshold(refVal_treshold);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataCollectionMethod")))
    {
        utility::string_t refVal_dataCollectionMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dataCollectionMethod")), refVal_dataCollectionMethod );
        setDataCollectionMethod(refVal_dataCollectionMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dataCollectionConfig")))
    {
        utility::string_t refVal_dataCollectionConfig;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dataCollectionConfig")), refVal_dataCollectionConfig );
        setDataCollectionConfig(refVal_dataCollectionConfig);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        utility::string_t refVal_created;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("created")), refVal_created );
        setCreated(refVal_created);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uuid")))
    {
        utility::string_t refVal_uuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uuid")), refVal_uuid );
        setUuid(refVal_uuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        utility::string_t refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("agent")))
    {
        utility::string_t refVal_agent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("agent")), refVal_agent );
        setAgent(refVal_agent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("datasets")))
    {
        std::vector<std::shared_ptr<Json_DatasetInfo>> refVal_datasets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("datasets")), refVal_datasets );
        setDatasets(refVal_datasets);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("participants")))
    {
        std::vector<utility::string_t> refVal_participants;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("participants")), refVal_participants );
        setParticipants(refVal_participants);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("views")))
    {
        utility::string_t refVal_views;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("views")), refVal_views );
        setViews(refVal_views);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("actions")))
    {
        std::vector<std::shared_ptr<Json_AnalysisRequestAction>> refVal_actions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("actions")), refVal_actions );
        setActions(refVal_actions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("creator")))
    {
        utility::string_t refVal_creator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("creator")), refVal_creator );
        setCreator(refVal_creator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("datasetCount")))
    {
        utility::string_t refVal_datasetCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("datasetCount")), refVal_datasetCount );
        setDatasetCount(refVal_datasetCount);
    }
    return ok;
}

utility::string_t Json_Analysis::getCreated() const
{
    return m_Created;
}

void Json_Analysis::setCreated(const utility::string_t& value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}

bool Json_Analysis::createdIsSet() const
{
    return m_CreatedIsSet;
}

void Json_Analysis::unsetCreated()
{
    m_CreatedIsSet = false;
}
utility::string_t Json_Analysis::getUuid() const
{
    return m_Uuid;
}

void Json_Analysis::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool Json_Analysis::uuidIsSet() const
{
    return m_UuidIsSet;
}

void Json_Analysis::unsetUuid()
{
    m_UuidIsSet = false;
}
utility::string_t Json_Analysis::getStatus() const
{
    return m_Status;
}

void Json_Analysis::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Json_Analysis::statusIsSet() const
{
    return m_StatusIsSet;
}

void Json_Analysis::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Json_Analysis::getAgent() const
{
    return m_Agent;
}

void Json_Analysis::setAgent(const utility::string_t& value)
{
    m_Agent = value;
    m_AgentIsSet = true;
}

bool Json_Analysis::agentIsSet() const
{
    return m_AgentIsSet;
}

void Json_Analysis::unsetAgent()
{
    m_AgentIsSet = false;
}
std::vector<std::shared_ptr<Json_DatasetInfo>>& Json_Analysis::getDatasets()
{
    return m_Datasets;
}

void Json_Analysis::setDatasets(const std::vector<std::shared_ptr<Json_DatasetInfo>>& value)
{
    m_Datasets = value;
    m_DatasetsIsSet = true;
}

bool Json_Analysis::datasetsIsSet() const
{
    return m_DatasetsIsSet;
}

void Json_Analysis::unsetDatasets()
{
    m_DatasetsIsSet = false;
}
std::vector<utility::string_t>& Json_Analysis::getParticipants()
{
    return m_Participants;
}

void Json_Analysis::setParticipants(const std::vector<utility::string_t>& value)
{
    m_Participants = value;
    m_ParticipantsIsSet = true;
}

bool Json_Analysis::participantsIsSet() const
{
    return m_ParticipantsIsSet;
}

void Json_Analysis::unsetParticipants()
{
    m_ParticipantsIsSet = false;
}
utility::string_t Json_Analysis::getViews() const
{
    return m_Views;
}

void Json_Analysis::setViews(const utility::string_t& value)
{
    m_Views = value;
    m_ViewsIsSet = true;
}

bool Json_Analysis::viewsIsSet() const
{
    return m_ViewsIsSet;
}

void Json_Analysis::unsetViews()
{
    m_ViewsIsSet = false;
}
std::vector<std::shared_ptr<Json_AnalysisRequestAction>>& Json_Analysis::getActions()
{
    return m_Actions;
}

void Json_Analysis::setActions(const std::vector<std::shared_ptr<Json_AnalysisRequestAction>>& value)
{
    m_Actions = value;
    m_ActionsIsSet = true;
}

bool Json_Analysis::actionsIsSet() const
{
    return m_ActionsIsSet;
}

void Json_Analysis::unsetActions()
{
    m_ActionsIsSet = false;
}
utility::string_t Json_Analysis::getCreator() const
{
    return m_Creator;
}

void Json_Analysis::setCreator(const utility::string_t& value)
{
    m_Creator = value;
    m_CreatorIsSet = true;
}

bool Json_Analysis::creatorIsSet() const
{
    return m_CreatorIsSet;
}

void Json_Analysis::unsetCreator()
{
    m_CreatorIsSet = false;
}
utility::string_t Json_Analysis::getDatasetCount() const
{
    return m_DatasetCount;
}

void Json_Analysis::setDatasetCount(const utility::string_t& value)
{
    m_DatasetCount = value;
    m_DatasetCountIsSet = true;
}

bool Json_Analysis::datasetCountIsSet() const
{
    return m_DatasetCountIsSet;
}

void Json_Analysis::unsetDatasetCount()
{
    m_DatasetCountIsSet = false;
}
}
}
}
}


