/**
 * madana-api
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Json_MDN_OAuthToken.h"

namespace com {
namespace madana {
namespace client {
namespace model {




Json_MDN_OAuthToken::Json_MDN_OAuthToken()
{
    m_Token = utility::conversions::to_string_t("");
    m_TokenIsSet = false;
    m_Verifier = utility::conversions::to_string_t("");
    m_VerifierIsSet = false;
}

Json_MDN_OAuthToken::~Json_MDN_OAuthToken()
{
}

void Json_MDN_OAuthToken::validate()
{
    // TODO: implement validation
}

web::json::value Json_MDN_OAuthToken::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TokenIsSet)
    {
        val[utility::conversions::to_string_t("token")] = ModelBase::toJson(m_Token);
    }
    if(m_VerifierIsSet)
    {
        val[utility::conversions::to_string_t("verifier")] = ModelBase::toJson(m_Verifier);
    }

    return val;
}

bool Json_MDN_OAuthToken::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("token")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("token"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_token;
            ok &= ModelBase::fromJson(fieldValue, refVal_token);
            setToken(refVal_token);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("verifier")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("verifier"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_verifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_verifier);
            setVerifier(refVal_verifier);
        }
    }
    return ok;
}

void Json_MDN_OAuthToken::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("token"), m_Token));
    }
    if(m_VerifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("verifier"), m_Verifier));
    }
}

bool Json_MDN_OAuthToken::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("token")))
    {
        utility::string_t refVal_token;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("token")), refVal_token );
        setToken(refVal_token);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("verifier")))
    {
        utility::string_t refVal_verifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("verifier")), refVal_verifier );
        setVerifier(refVal_verifier);
    }
    return ok;
}

utility::string_t Json_MDN_OAuthToken::getToken() const
{
    return m_Token;
}

void Json_MDN_OAuthToken::setToken(const utility::string_t& value)
{
    m_Token = value;
    m_TokenIsSet = true;
}

bool Json_MDN_OAuthToken::tokenIsSet() const
{
    return m_TokenIsSet;
}

void Json_MDN_OAuthToken::unsetToken()
{
    m_TokenIsSet = false;
}
utility::string_t Json_MDN_OAuthToken::getVerifier() const
{
    return m_Verifier;
}

void Json_MDN_OAuthToken::setVerifier(const utility::string_t& value)
{
    m_Verifier = value;
    m_VerifierIsSet = true;
}

bool Json_MDN_OAuthToken::verifierIsSet() const
{
    return m_VerifierIsSet;
}

void Json_MDN_OAuthToken::unsetVerifier()
{
    m_VerifierIsSet = false;
}
}
}
}
}


