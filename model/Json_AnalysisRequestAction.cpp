/**
 * madana-api
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Json_AnalysisRequestAction.h"

namespace com {
namespace madana {
namespace client {
namespace model {




Json_AnalysisRequestAction::Json_AnalysisRequestAction()
{
    m_RequestID = utility::conversions::to_string_t("");
    m_RequestIDIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_Connection = utility::conversions::to_string_t("");
    m_ConnectionIsSet = false;
    m_date = utility::conversions::to_string_t("");
    m_dateIsSet = false;
    m_Fingerprint = utility::conversions::to_string_t("");
    m_FingerprintIsSet = false;
    m_Application = utility::conversions::to_string_t("");
    m_ApplicationIsSet = false;
    m_Action = utility::conversions::to_string_t("");
    m_ActionIsSet = false;
    m_Details = utility::conversions::to_string_t("");
    m_DetailsIsSet = false;
    m_Signature = utility::conversions::to_string_t("");
    m_SignatureIsSet = false;
}

Json_AnalysisRequestAction::~Json_AnalysisRequestAction()
{
}

void Json_AnalysisRequestAction::validate()
{
    // TODO: implement validation
}

web::json::value Json_AnalysisRequestAction::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RequestIDIsSet)
    {
        val[utility::conversions::to_string_t("requestID")] = ModelBase::toJson(m_RequestID);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    }
    if(m_ConnectionIsSet)
    {
        val[utility::conversions::to_string_t("connection")] = ModelBase::toJson(m_Connection);
    }
    if(m_dateIsSet)
    {
        val[utility::conversions::to_string_t("date")] = ModelBase::toJson(m_date);
    }
    if(m_FingerprintIsSet)
    {
        val[utility::conversions::to_string_t("fingerprint")] = ModelBase::toJson(m_Fingerprint);
    }
    if(m_ApplicationIsSet)
    {
        val[utility::conversions::to_string_t("application")] = ModelBase::toJson(m_Application);
    }
    if(m_ActionIsSet)
    {
        val[utility::conversions::to_string_t("action")] = ModelBase::toJson(m_Action);
    }
    if(m_DetailsIsSet)
    {
        val[utility::conversions::to_string_t("details")] = ModelBase::toJson(m_Details);
    }
    if(m_SignatureIsSet)
    {
        val[utility::conversions::to_string_t("signature")] = ModelBase::toJson(m_Signature);
    }

    return val;
}

bool Json_AnalysisRequestAction::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("requestID")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("requestID"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_requestID;
            ok &= ModelBase::fromJson(fieldValue, refVal_requestID);
            setRequestID(refVal_requestID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("user"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_user;
            ok &= ModelBase::fromJson(fieldValue, refVal_user);
            setUser(refVal_user);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connection")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("connection"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_connection;
            ok &= ModelBase::fromJson(fieldValue, refVal_connection);
            setConnection(refVal_connection);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("date")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("date"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_date;
            ok &= ModelBase::fromJson(fieldValue, refVal_date);
            setDate(refVal_date);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fingerprint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fingerprint"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fingerprint;
            ok &= ModelBase::fromJson(fieldValue, refVal_fingerprint);
            setFingerprint(refVal_fingerprint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("application")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("application"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_application;
            ok &= ModelBase::fromJson(fieldValue, refVal_application);
            setApplication(refVal_application);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("action")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("action"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_action;
            ok &= ModelBase::fromJson(fieldValue, refVal_action);
            setAction(refVal_action);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("details")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("details"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_details;
            ok &= ModelBase::fromJson(fieldValue, refVal_details);
            setDetails(refVal_details);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("signature")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("signature"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_signature;
            ok &= ModelBase::fromJson(fieldValue, refVal_signature);
            setSignature(refVal_signature);
        }
    }
    return ok;
}

void Json_AnalysisRequestAction::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_RequestIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("requestID"), m_RequestID));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user"), m_User));
    }
    if(m_ConnectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("connection"), m_Connection));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date"), m_date));
    }
    if(m_FingerprintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fingerprint"), m_Fingerprint));
    }
    if(m_ApplicationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("application"), m_Application));
    }
    if(m_ActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("action"), m_Action));
    }
    if(m_DetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("details"), m_Details));
    }
    if(m_SignatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signature"), m_Signature));
    }
}

bool Json_AnalysisRequestAction::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("requestID")))
    {
        utility::string_t refVal_requestID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("requestID")), refVal_requestID );
        setRequestID(refVal_requestID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user")))
    {
        utility::string_t refVal_user;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("user")), refVal_user );
        setUser(refVal_user);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connection")))
    {
        utility::string_t refVal_connection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("connection")), refVal_connection );
        setConnection(refVal_connection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("date")))
    {
        utility::string_t refVal_date;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("date")), refVal_date );
        setDate(refVal_date);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fingerprint")))
    {
        utility::string_t refVal_fingerprint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fingerprint")), refVal_fingerprint );
        setFingerprint(refVal_fingerprint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("application")))
    {
        utility::string_t refVal_application;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("application")), refVal_application );
        setApplication(refVal_application);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("action")))
    {
        utility::string_t refVal_action;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("action")), refVal_action );
        setAction(refVal_action);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("details")))
    {
        utility::string_t refVal_details;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("details")), refVal_details );
        setDetails(refVal_details);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("signature")))
    {
        utility::string_t refVal_signature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("signature")), refVal_signature );
        setSignature(refVal_signature);
    }
    return ok;
}

utility::string_t Json_AnalysisRequestAction::getRequestID() const
{
    return m_RequestID;
}

void Json_AnalysisRequestAction::setRequestID(const utility::string_t& value)
{
    m_RequestID = value;
    m_RequestIDIsSet = true;
}

bool Json_AnalysisRequestAction::requestIDIsSet() const
{
    return m_RequestIDIsSet;
}

void Json_AnalysisRequestAction::unsetRequestID()
{
    m_RequestIDIsSet = false;
}
utility::string_t Json_AnalysisRequestAction::getUser() const
{
    return m_User;
}

void Json_AnalysisRequestAction::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool Json_AnalysisRequestAction::userIsSet() const
{
    return m_UserIsSet;
}

void Json_AnalysisRequestAction::unsetUser()
{
    m_UserIsSet = false;
}
utility::string_t Json_AnalysisRequestAction::getConnection() const
{
    return m_Connection;
}

void Json_AnalysisRequestAction::setConnection(const utility::string_t& value)
{
    m_Connection = value;
    m_ConnectionIsSet = true;
}

bool Json_AnalysisRequestAction::connectionIsSet() const
{
    return m_ConnectionIsSet;
}

void Json_AnalysisRequestAction::unsetConnection()
{
    m_ConnectionIsSet = false;
}
utility::string_t Json_AnalysisRequestAction::getDate() const
{
    return m_date;
}

void Json_AnalysisRequestAction::setDate(const utility::string_t& value)
{
    m_date = value;
    m_dateIsSet = true;
}

bool Json_AnalysisRequestAction::dateIsSet() const
{
    return m_dateIsSet;
}

void Json_AnalysisRequestAction::unsetdate()
{
    m_dateIsSet = false;
}
utility::string_t Json_AnalysisRequestAction::getFingerprint() const
{
    return m_Fingerprint;
}

void Json_AnalysisRequestAction::setFingerprint(const utility::string_t& value)
{
    m_Fingerprint = value;
    m_FingerprintIsSet = true;
}

bool Json_AnalysisRequestAction::fingerprintIsSet() const
{
    return m_FingerprintIsSet;
}

void Json_AnalysisRequestAction::unsetFingerprint()
{
    m_FingerprintIsSet = false;
}
utility::string_t Json_AnalysisRequestAction::getApplication() const
{
    return m_Application;
}

void Json_AnalysisRequestAction::setApplication(const utility::string_t& value)
{
    m_Application = value;
    m_ApplicationIsSet = true;
}

bool Json_AnalysisRequestAction::applicationIsSet() const
{
    return m_ApplicationIsSet;
}

void Json_AnalysisRequestAction::unsetApplication()
{
    m_ApplicationIsSet = false;
}
utility::string_t Json_AnalysisRequestAction::getAction() const
{
    return m_Action;
}

void Json_AnalysisRequestAction::setAction(const utility::string_t& value)
{
    m_Action = value;
    m_ActionIsSet = true;
}

bool Json_AnalysisRequestAction::actionIsSet() const
{
    return m_ActionIsSet;
}

void Json_AnalysisRequestAction::unsetAction()
{
    m_ActionIsSet = false;
}
utility::string_t Json_AnalysisRequestAction::getDetails() const
{
    return m_Details;
}

void Json_AnalysisRequestAction::setDetails(const utility::string_t& value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}

bool Json_AnalysisRequestAction::detailsIsSet() const
{
    return m_DetailsIsSet;
}

void Json_AnalysisRequestAction::unsetDetails()
{
    m_DetailsIsSet = false;
}
utility::string_t Json_AnalysisRequestAction::getSignature() const
{
    return m_Signature;
}

void Json_AnalysisRequestAction::setSignature(const utility::string_t& value)
{
    m_Signature = value;
    m_SignatureIsSet = true;
}

bool Json_AnalysisRequestAction::signatureIsSet() const
{
    return m_SignatureIsSet;
}

void Json_AnalysisRequestAction::unsetSignature()
{
    m_SignatureIsSet = false;
}
}
}
}
}


