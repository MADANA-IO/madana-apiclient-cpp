/**
 * madana-api
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Json_MDN_PasswordReset.h"

namespace com {
namespace madana {
namespace client {
namespace model {




Json_MDN_PasswordReset::Json_MDN_PasswordReset()
{
    m_Password = utility::conversions::to_string_t("");
    m_PasswordIsSet = false;
    m_Token = utility::conversions::to_string_t("");
    m_TokenIsSet = false;
    m_Mail = utility::conversions::to_string_t("");
    m_MailIsSet = false;
}

Json_MDN_PasswordReset::~Json_MDN_PasswordReset()
{
}

void Json_MDN_PasswordReset::validate()
{
    // TODO: implement validation
}

web::json::value Json_MDN_PasswordReset::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_Password);
    }
    if(m_TokenIsSet)
    {
        val[utility::conversions::to_string_t("token")] = ModelBase::toJson(m_Token);
    }
    if(m_MailIsSet)
    {
        val[utility::conversions::to_string_t("mail")] = ModelBase::toJson(m_Mail);
    }

    return val;
}

bool Json_MDN_PasswordReset::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("password")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("password"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_password;
            ok &= ModelBase::fromJson(fieldValue, refVal_password);
            setPassword(refVal_password);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("token")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("token"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_token;
            ok &= ModelBase::fromJson(fieldValue, refVal_token);
            setToken(refVal_token);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mail"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mail;
            ok &= ModelBase::fromJson(fieldValue, refVal_mail);
            setMail(refVal_mail);
        }
    }
    return ok;
}

void Json_MDN_PasswordReset::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("password"), m_Password));
    }
    if(m_TokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("token"), m_Token));
    }
    if(m_MailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mail"), m_Mail));
    }
}

bool Json_MDN_PasswordReset::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("password")))
    {
        utility::string_t refVal_password;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("password")), refVal_password );
        setPassword(refVal_password);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("token")))
    {
        utility::string_t refVal_token;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("token")), refVal_token );
        setToken(refVal_token);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mail")))
    {
        utility::string_t refVal_mail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mail")), refVal_mail );
        setMail(refVal_mail);
    }
    return ok;
}

utility::string_t Json_MDN_PasswordReset::getPassword() const
{
    return m_Password;
}

void Json_MDN_PasswordReset::setPassword(const utility::string_t& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}

bool Json_MDN_PasswordReset::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void Json_MDN_PasswordReset::unsetPassword()
{
    m_PasswordIsSet = false;
}
utility::string_t Json_MDN_PasswordReset::getToken() const
{
    return m_Token;
}

void Json_MDN_PasswordReset::setToken(const utility::string_t& value)
{
    m_Token = value;
    m_TokenIsSet = true;
}

bool Json_MDN_PasswordReset::tokenIsSet() const
{
    return m_TokenIsSet;
}

void Json_MDN_PasswordReset::unsetToken()
{
    m_TokenIsSet = false;
}
utility::string_t Json_MDN_PasswordReset::getMail() const
{
    return m_Mail;
}

void Json_MDN_PasswordReset::setMail(const utility::string_t& value)
{
    m_Mail = value;
    m_MailIsSet = true;
}

bool Json_MDN_PasswordReset::mailIsSet() const
{
    return m_MailIsSet;
}

void Json_MDN_PasswordReset::unsetMail()
{
    m_MailIsSet = false;
}
}
}
}
}


