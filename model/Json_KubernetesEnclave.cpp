/**
 * madana-api
 * <h1>Using the madana-api</h1>        <p>This documentation contains a Quickstart Guide, relating client functionality and information about the available         endpoints and used datamodels.   </p>       <p> The madana-api and its implementations are still in heavy development. This means that there may be problems in our protocols, or there may be mistakes in our implementations. We take security vulnerabilities very seriously. If you discover a security issue, please bring it to our attention right away! If you find a vulnerability that may affect live deployments -- for example, by exposing a remote execution exploit -- please send your report privately to info@madana.io. Please DO NOT file a public issue. If the issue is a protocol weakness that cannot be immediately exploited or something not yet deployed, just discuss it openly   </p>   <br>   <p> Note: Not all functionality might be acessible without having accquired and api-license token. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a> </p>       <br>
 *
 * The version of the OpenAPI document: 0.5.0-master.35
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Json_KubernetesEnclave.h"

namespace com {
namespace madana {
namespace apiclient {
namespace model {




Json_KubernetesEnclave::Json_KubernetesEnclave()
{
    m_WgInterfaceIsSet = false;
    m_EnvironmentIsSet = false;
    m_StartupCMD = utility::conversions::to_string_t("");
    m_StartupCMDIsSet = false;
    m_InternalRemoteControlServer = utility::conversions::to_string_t("");
    m_InternalRemoteControlServerIsSet = false;
    m_ConsoleOutput = utility::conversions::to_string_t("");
    m_ConsoleOutputIsSet = false;
    m_EndingTime = utility::conversions::to_string_t("");
    m_EndingTimeIsSet = false;
    m_StartupTime = utility::conversions::to_string_t("");
    m_StartupTimeIsSet = false;
    m_RemoteControlServer = utility::conversions::to_string_t("");
    m_RemoteControlServerIsSet = false;
    m_PortsIsSet = false;
    m_KubernetesEnclaveIsSet = false;
    m_WireguardServer = utility::conversions::to_string_t("");
    m_WireguardServerIsSet = false;
    m_InternalWireguardServer = utility::conversions::to_string_t("");
    m_InternalWireguardServerIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_WireguardPublicKey = utility::conversions::to_string_t("");
    m_WireguardPublicKeyIsSet = false;
    m_EnclaveIdent = utility::conversions::to_string_t("");
    m_EnclaveIdentIsSet = false;
    m_InternalIdent = utility::conversions::to_string_t("");
    m_InternalIdentIsSet = false;
    m_PublicIdent = utility::conversions::to_string_t("");
    m_PublicIdentIsSet = false;
    m_ProcessIsSet = false;
    m_InternalAttesationServer = utility::conversions::to_string_t("");
    m_InternalAttesationServerIsSet = false;
    m_SignerIdent = utility::conversions::to_string_t("");
    m_SignerIdentIsSet = false;
    m_EnclaveInputstreamIsSet = false;
    m_AttestationServer = utility::conversions::to_string_t("");
    m_AttestationServerIsSet = false;
    m_PortMappingIsSet = false;
    m_EnclaveReplicaSetEventsIsSet = false;
    m_WireguardPort = 0;
    m_WireguardPortIsSet = false;
    m_AttestationPort = 0;
    m_AttestationPortIsSet = false;
    m_EnclaveDeploymentEventsIsSet = false;
    m_EnclavePodEventsIsSet = false;
    m_IsUsingInitContainer = false;
    m_IsUsingInitContainerIsSet = false;
    m_PodPhase = utility::conversions::to_string_t("");
    m_PodPhaseIsSet = false;
    m_DebugInfo = utility::conversions::to_string_t("");
    m_DebugInfoIsSet = false;
    m_RemoteControlIP = utility::conversions::to_string_t("");
    m_RemoteControlIPIsSet = false;
}

Json_KubernetesEnclave::~Json_KubernetesEnclave()
{
}

void Json_KubernetesEnclave::validate()
{
    // TODO: implement validation
}

web::json::value Json_KubernetesEnclave::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_WgInterfaceIsSet)
    {
        val[utility::conversions::to_string_t("wgInterface")] = ModelBase::toJson(m_WgInterface);
    }
    if(m_EnvironmentIsSet)
    {
        val[utility::conversions::to_string_t("environment")] = ModelBase::toJson(m_Environment);
    }
    if(m_StartupCMDIsSet)
    {
        val[utility::conversions::to_string_t("startupCMD")] = ModelBase::toJson(m_StartupCMD);
    }
    if(m_InternalRemoteControlServerIsSet)
    {
        val[utility::conversions::to_string_t("internalRemoteControlServer")] = ModelBase::toJson(m_InternalRemoteControlServer);
    }
    if(m_ConsoleOutputIsSet)
    {
        val[utility::conversions::to_string_t("consoleOutput")] = ModelBase::toJson(m_ConsoleOutput);
    }
    if(m_EndingTimeIsSet)
    {
        val[utility::conversions::to_string_t("endingTime")] = ModelBase::toJson(m_EndingTime);
    }
    if(m_StartupTimeIsSet)
    {
        val[utility::conversions::to_string_t("startupTime")] = ModelBase::toJson(m_StartupTime);
    }
    if(m_RemoteControlServerIsSet)
    {
        val[utility::conversions::to_string_t("remoteControlServer")] = ModelBase::toJson(m_RemoteControlServer);
    }
    if(m_PortsIsSet)
    {
        val[utility::conversions::to_string_t("ports")] = ModelBase::toJson(m_Ports);
    }
    if(m_KubernetesEnclaveIsSet)
    {
        val[utility::conversions::to_string_t("kubernetesEnclave")] = ModelBase::toJson(m_KubernetesEnclave);
    }
    if(m_WireguardServerIsSet)
    {
        val[utility::conversions::to_string_t("wireguardServer")] = ModelBase::toJson(m_WireguardServer);
    }
    if(m_InternalWireguardServerIsSet)
    {
        val[utility::conversions::to_string_t("internalWireguardServer")] = ModelBase::toJson(m_InternalWireguardServer);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_WireguardPublicKeyIsSet)
    {
        val[utility::conversions::to_string_t("wireguardPublicKey")] = ModelBase::toJson(m_WireguardPublicKey);
    }
    if(m_EnclaveIdentIsSet)
    {
        val[utility::conversions::to_string_t("enclaveIdent")] = ModelBase::toJson(m_EnclaveIdent);
    }
    if(m_InternalIdentIsSet)
    {
        val[utility::conversions::to_string_t("internalIdent")] = ModelBase::toJson(m_InternalIdent);
    }
    if(m_PublicIdentIsSet)
    {
        val[utility::conversions::to_string_t("publicIdent")] = ModelBase::toJson(m_PublicIdent);
    }
    if(m_ProcessIsSet)
    {
        val[utility::conversions::to_string_t("process")] = ModelBase::toJson(m_Process);
    }
    if(m_InternalAttesationServerIsSet)
    {
        val[utility::conversions::to_string_t("internalAttesationServer")] = ModelBase::toJson(m_InternalAttesationServer);
    }
    if(m_SignerIdentIsSet)
    {
        val[utility::conversions::to_string_t("signerIdent")] = ModelBase::toJson(m_SignerIdent);
    }
    if(m_EnclaveInputstreamIsSet)
    {
        val[utility::conversions::to_string_t("enclaveInputstream")] = ModelBase::toJson(m_EnclaveInputstream);
    }
    if(m_AttestationServerIsSet)
    {
        val[utility::conversions::to_string_t("attestationServer")] = ModelBase::toJson(m_AttestationServer);
    }
    if(m_PortMappingIsSet)
    {
        val[utility::conversions::to_string_t("portMapping")] = ModelBase::toJson(m_PortMapping);
    }
    if(m_EnclaveReplicaSetEventsIsSet)
    {
        val[utility::conversions::to_string_t("enclaveReplicaSetEvents")] = ModelBase::toJson(m_EnclaveReplicaSetEvents);
    }
    if(m_WireguardPortIsSet)
    {
        val[utility::conversions::to_string_t("wireguardPort")] = ModelBase::toJson(m_WireguardPort);
    }
    if(m_AttestationPortIsSet)
    {
        val[utility::conversions::to_string_t("attestationPort")] = ModelBase::toJson(m_AttestationPort);
    }
    if(m_EnclaveDeploymentEventsIsSet)
    {
        val[utility::conversions::to_string_t("enclaveDeploymentEvents")] = ModelBase::toJson(m_EnclaveDeploymentEvents);
    }
    if(m_EnclavePodEventsIsSet)
    {
        val[utility::conversions::to_string_t("enclavePodEvents")] = ModelBase::toJson(m_EnclavePodEvents);
    }
    if(m_IsUsingInitContainerIsSet)
    {
        val[utility::conversions::to_string_t("isUsingInitContainer")] = ModelBase::toJson(m_IsUsingInitContainer);
    }
    if(m_PodPhaseIsSet)
    {
        val[utility::conversions::to_string_t("podPhase")] = ModelBase::toJson(m_PodPhase);
    }
    if(m_DebugInfoIsSet)
    {
        val[utility::conversions::to_string_t("debugInfo")] = ModelBase::toJson(m_DebugInfo);
    }
    if(m_RemoteControlIPIsSet)
    {
        val[utility::conversions::to_string_t("remoteControlIP")] = ModelBase::toJson(m_RemoteControlIP);
    }

    return val;
}

bool Json_KubernetesEnclave::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("wgInterface")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wgInterface"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Json_WireguardInterface> refVal_wgInterface;
            ok &= ModelBase::fromJson(fieldValue, refVal_wgInterface);
            setWgInterface(refVal_wgInterface);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("environment")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("environment"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Json_Environment> refVal_environment;
            ok &= ModelBase::fromJson(fieldValue, refVal_environment);
            setEnvironment(refVal_environment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startupCMD")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startupCMD"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_startupCMD;
            ok &= ModelBase::fromJson(fieldValue, refVal_startupCMD);
            setStartupCMD(refVal_startupCMD);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("internalRemoteControlServer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("internalRemoteControlServer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_internalRemoteControlServer;
            ok &= ModelBase::fromJson(fieldValue, refVal_internalRemoteControlServer);
            setInternalRemoteControlServer(refVal_internalRemoteControlServer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("consoleOutput")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("consoleOutput"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_consoleOutput;
            ok &= ModelBase::fromJson(fieldValue, refVal_consoleOutput);
            setConsoleOutput(refVal_consoleOutput);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endingTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endingTime"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_endingTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_endingTime);
            setEndingTime(refVal_endingTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("startupTime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("startupTime"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_startupTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_startupTime);
            setStartupTime(refVal_startupTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("remoteControlServer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("remoteControlServer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_remoteControlServer;
            ok &= ModelBase::fromJson(fieldValue, refVal_remoteControlServer);
            setRemoteControlServer(refVal_remoteControlServer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ports")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ports"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Json_EnclavePort>> refVal_ports;
            ok &= ModelBase::fromJson(fieldValue, refVal_ports);
            setPorts(refVal_ports);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("kubernetesEnclave")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("kubernetesEnclave"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Json_KubernetesEnclave> refVal_kubernetesEnclave;
            ok &= ModelBase::fromJson(fieldValue, refVal_kubernetesEnclave);
            setKubernetesEnclave(refVal_kubernetesEnclave);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wireguardServer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wireguardServer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wireguardServer;
            ok &= ModelBase::fromJson(fieldValue, refVal_wireguardServer);
            setWireguardServer(refVal_wireguardServer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("internalWireguardServer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("internalWireguardServer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_internalWireguardServer;
            ok &= ModelBase::fromJson(fieldValue, refVal_internalWireguardServer);
            setInternalWireguardServer(refVal_internalWireguardServer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wireguardPublicKey")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wireguardPublicKey"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wireguardPublicKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_wireguardPublicKey);
            setWireguardPublicKey(refVal_wireguardPublicKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enclaveIdent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enclaveIdent"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_enclaveIdent;
            ok &= ModelBase::fromJson(fieldValue, refVal_enclaveIdent);
            setEnclaveIdent(refVal_enclaveIdent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("internalIdent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("internalIdent"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_internalIdent;
            ok &= ModelBase::fromJson(fieldValue, refVal_internalIdent);
            setInternalIdent(refVal_internalIdent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("publicIdent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("publicIdent"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_publicIdent;
            ok &= ModelBase::fromJson(fieldValue, refVal_publicIdent);
            setPublicIdent(refVal_publicIdent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("process")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("process"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Json_Process> refVal_process;
            ok &= ModelBase::fromJson(fieldValue, refVal_process);
            setProcess(refVal_process);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("internalAttesationServer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("internalAttesationServer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_internalAttesationServer;
            ok &= ModelBase::fromJson(fieldValue, refVal_internalAttesationServer);
            setInternalAttesationServer(refVal_internalAttesationServer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("signerIdent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("signerIdent"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_signerIdent;
            ok &= ModelBase::fromJson(fieldValue, refVal_signerIdent);
            setSignerIdent(refVal_signerIdent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enclaveInputstream")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enclaveInputstream"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_enclaveInputstream;
            ok &= ModelBase::fromJson(fieldValue, refVal_enclaveInputstream);
            setEnclaveInputstream(refVal_enclaveInputstream);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("attestationServer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("attestationServer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_attestationServer;
            ok &= ModelBase::fromJson(fieldValue, refVal_attestationServer);
            setAttestationServer(refVal_attestationServer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("portMapping")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("portMapping"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_portMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_portMapping);
            setPortMapping(refVal_portMapping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enclaveReplicaSetEvents")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enclaveReplicaSetEvents"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Json_V1EventList> refVal_enclaveReplicaSetEvents;
            ok &= ModelBase::fromJson(fieldValue, refVal_enclaveReplicaSetEvents);
            setEnclaveReplicaSetEvents(refVal_enclaveReplicaSetEvents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wireguardPort")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wireguardPort"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_wireguardPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_wireguardPort);
            setWireguardPort(refVal_wireguardPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("attestationPort")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("attestationPort"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_attestationPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_attestationPort);
            setAttestationPort(refVal_attestationPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enclaveDeploymentEvents")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enclaveDeploymentEvents"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Json_V1EventList> refVal_enclaveDeploymentEvents;
            ok &= ModelBase::fromJson(fieldValue, refVal_enclaveDeploymentEvents);
            setEnclaveDeploymentEvents(refVal_enclaveDeploymentEvents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enclavePodEvents")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enclavePodEvents"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Json_V1EventList> refVal_enclavePodEvents;
            ok &= ModelBase::fromJson(fieldValue, refVal_enclavePodEvents);
            setEnclavePodEvents(refVal_enclavePodEvents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isUsingInitContainer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isUsingInitContainer"));
        if(!fieldValue.is_null())
        {
            bool refVal_isUsingInitContainer;
            ok &= ModelBase::fromJson(fieldValue, refVal_isUsingInitContainer);
            setIsUsingInitContainer(refVal_isUsingInitContainer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("podPhase")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("podPhase"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_podPhase;
            ok &= ModelBase::fromJson(fieldValue, refVal_podPhase);
            setPodPhase(refVal_podPhase);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("debugInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("debugInfo"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_debugInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_debugInfo);
            setDebugInfo(refVal_debugInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("remoteControlIP")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("remoteControlIP"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_remoteControlIP;
            ok &= ModelBase::fromJson(fieldValue, refVal_remoteControlIP);
            setRemoteControlIP(refVal_remoteControlIP);
        }
    }
    return ok;
}

void Json_KubernetesEnclave::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_WgInterfaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wgInterface"), m_WgInterface));
    }
    if(m_EnvironmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("environment"), m_Environment));
    }
    if(m_StartupCMDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startupCMD"), m_StartupCMD));
    }
    if(m_InternalRemoteControlServerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("internalRemoteControlServer"), m_InternalRemoteControlServer));
    }
    if(m_ConsoleOutputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("consoleOutput"), m_ConsoleOutput));
    }
    if(m_EndingTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endingTime"), m_EndingTime));
    }
    if(m_StartupTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startupTime"), m_StartupTime));
    }
    if(m_RemoteControlServerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("remoteControlServer"), m_RemoteControlServer));
    }
    if(m_PortsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ports"), m_Ports));
    }
    if(m_KubernetesEnclaveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("kubernetesEnclave"), m_KubernetesEnclave));
    }
    if(m_WireguardServerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wireguardServer"), m_WireguardServer));
    }
    if(m_InternalWireguardServerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("internalWireguardServer"), m_InternalWireguardServer));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
    if(m_WireguardPublicKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wireguardPublicKey"), m_WireguardPublicKey));
    }
    if(m_EnclaveIdentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enclaveIdent"), m_EnclaveIdent));
    }
    if(m_InternalIdentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("internalIdent"), m_InternalIdent));
    }
    if(m_PublicIdentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("publicIdent"), m_PublicIdent));
    }
    if(m_ProcessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("process"), m_Process));
    }
    if(m_InternalAttesationServerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("internalAttesationServer"), m_InternalAttesationServer));
    }
    if(m_SignerIdentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signerIdent"), m_SignerIdent));
    }
    if(m_EnclaveInputstreamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enclaveInputstream"), m_EnclaveInputstream));
    }
    if(m_AttestationServerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("attestationServer"), m_AttestationServer));
    }
    if(m_PortMappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("portMapping"), m_PortMapping));
    }
    if(m_EnclaveReplicaSetEventsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enclaveReplicaSetEvents"), m_EnclaveReplicaSetEvents));
    }
    if(m_WireguardPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wireguardPort"), m_WireguardPort));
    }
    if(m_AttestationPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("attestationPort"), m_AttestationPort));
    }
    if(m_EnclaveDeploymentEventsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enclaveDeploymentEvents"), m_EnclaveDeploymentEvents));
    }
    if(m_EnclavePodEventsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enclavePodEvents"), m_EnclavePodEvents));
    }
    if(m_IsUsingInitContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isUsingInitContainer"), m_IsUsingInitContainer));
    }
    if(m_PodPhaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("podPhase"), m_PodPhase));
    }
    if(m_DebugInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("debugInfo"), m_DebugInfo));
    }
    if(m_RemoteControlIPIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("remoteControlIP"), m_RemoteControlIP));
    }
}

bool Json_KubernetesEnclave::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("wgInterface")))
    {
        std::shared_ptr<Json_WireguardInterface> refVal_wgInterface;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wgInterface")), refVal_wgInterface );
        setWgInterface(refVal_wgInterface);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("environment")))
    {
        std::shared_ptr<Json_Environment> refVal_environment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("environment")), refVal_environment );
        setEnvironment(refVal_environment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startupCMD")))
    {
        utility::string_t refVal_startupCMD;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startupCMD")), refVal_startupCMD );
        setStartupCMD(refVal_startupCMD);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("internalRemoteControlServer")))
    {
        utility::string_t refVal_internalRemoteControlServer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("internalRemoteControlServer")), refVal_internalRemoteControlServer );
        setInternalRemoteControlServer(refVal_internalRemoteControlServer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("consoleOutput")))
    {
        utility::string_t refVal_consoleOutput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("consoleOutput")), refVal_consoleOutput );
        setConsoleOutput(refVal_consoleOutput);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endingTime")))
    {
        utility::string_t refVal_endingTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endingTime")), refVal_endingTime );
        setEndingTime(refVal_endingTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startupTime")))
    {
        utility::string_t refVal_startupTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("startupTime")), refVal_startupTime );
        setStartupTime(refVal_startupTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("remoteControlServer")))
    {
        utility::string_t refVal_remoteControlServer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("remoteControlServer")), refVal_remoteControlServer );
        setRemoteControlServer(refVal_remoteControlServer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ports")))
    {
        std::vector<std::shared_ptr<Json_EnclavePort>> refVal_ports;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ports")), refVal_ports );
        setPorts(refVal_ports);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("kubernetesEnclave")))
    {
        std::shared_ptr<Json_KubernetesEnclave> refVal_kubernetesEnclave;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("kubernetesEnclave")), refVal_kubernetesEnclave );
        setKubernetesEnclave(refVal_kubernetesEnclave);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wireguardServer")))
    {
        utility::string_t refVal_wireguardServer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wireguardServer")), refVal_wireguardServer );
        setWireguardServer(refVal_wireguardServer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("internalWireguardServer")))
    {
        utility::string_t refVal_internalWireguardServer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("internalWireguardServer")), refVal_internalWireguardServer );
        setInternalWireguardServer(refVal_internalWireguardServer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        utility::string_t refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wireguardPublicKey")))
    {
        utility::string_t refVal_wireguardPublicKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wireguardPublicKey")), refVal_wireguardPublicKey );
        setWireguardPublicKey(refVal_wireguardPublicKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enclaveIdent")))
    {
        utility::string_t refVal_enclaveIdent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enclaveIdent")), refVal_enclaveIdent );
        setEnclaveIdent(refVal_enclaveIdent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("internalIdent")))
    {
        utility::string_t refVal_internalIdent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("internalIdent")), refVal_internalIdent );
        setInternalIdent(refVal_internalIdent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("publicIdent")))
    {
        utility::string_t refVal_publicIdent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("publicIdent")), refVal_publicIdent );
        setPublicIdent(refVal_publicIdent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("process")))
    {
        std::shared_ptr<Json_Process> refVal_process;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("process")), refVal_process );
        setProcess(refVal_process);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("internalAttesationServer")))
    {
        utility::string_t refVal_internalAttesationServer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("internalAttesationServer")), refVal_internalAttesationServer );
        setInternalAttesationServer(refVal_internalAttesationServer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("signerIdent")))
    {
        utility::string_t refVal_signerIdent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("signerIdent")), refVal_signerIdent );
        setSignerIdent(refVal_signerIdent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enclaveInputstream")))
    {
        std::shared_ptr<Object> refVal_enclaveInputstream;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enclaveInputstream")), refVal_enclaveInputstream );
        setEnclaveInputstream(refVal_enclaveInputstream);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("attestationServer")))
    {
        utility::string_t refVal_attestationServer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("attestationServer")), refVal_attestationServer );
        setAttestationServer(refVal_attestationServer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("portMapping")))
    {
        std::map<utility::string_t, utility::string_t> refVal_portMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("portMapping")), refVal_portMapping );
        setPortMapping(refVal_portMapping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enclaveReplicaSetEvents")))
    {
        std::shared_ptr<Json_V1EventList> refVal_enclaveReplicaSetEvents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enclaveReplicaSetEvents")), refVal_enclaveReplicaSetEvents );
        setEnclaveReplicaSetEvents(refVal_enclaveReplicaSetEvents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wireguardPort")))
    {
        int32_t refVal_wireguardPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wireguardPort")), refVal_wireguardPort );
        setWireguardPort(refVal_wireguardPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("attestationPort")))
    {
        int32_t refVal_attestationPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("attestationPort")), refVal_attestationPort );
        setAttestationPort(refVal_attestationPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enclaveDeploymentEvents")))
    {
        std::shared_ptr<Json_V1EventList> refVal_enclaveDeploymentEvents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enclaveDeploymentEvents")), refVal_enclaveDeploymentEvents );
        setEnclaveDeploymentEvents(refVal_enclaveDeploymentEvents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enclavePodEvents")))
    {
        std::shared_ptr<Json_V1EventList> refVal_enclavePodEvents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enclavePodEvents")), refVal_enclavePodEvents );
        setEnclavePodEvents(refVal_enclavePodEvents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isUsingInitContainer")))
    {
        bool refVal_isUsingInitContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isUsingInitContainer")), refVal_isUsingInitContainer );
        setIsUsingInitContainer(refVal_isUsingInitContainer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("podPhase")))
    {
        utility::string_t refVal_podPhase;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("podPhase")), refVal_podPhase );
        setPodPhase(refVal_podPhase);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("debugInfo")))
    {
        utility::string_t refVal_debugInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("debugInfo")), refVal_debugInfo );
        setDebugInfo(refVal_debugInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("remoteControlIP")))
    {
        utility::string_t refVal_remoteControlIP;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("remoteControlIP")), refVal_remoteControlIP );
        setRemoteControlIP(refVal_remoteControlIP);
    }
    return ok;
}

std::shared_ptr<Json_WireguardInterface> Json_KubernetesEnclave::getWgInterface() const
{
    return m_WgInterface;
}

void Json_KubernetesEnclave::setWgInterface(const std::shared_ptr<Json_WireguardInterface>& value)
{
    m_WgInterface = value;
    m_WgInterfaceIsSet = true;
}

bool Json_KubernetesEnclave::wgInterfaceIsSet() const
{
    return m_WgInterfaceIsSet;
}

void Json_KubernetesEnclave::unsetWgInterface()
{
    m_WgInterfaceIsSet = false;
}
std::shared_ptr<Json_Environment> Json_KubernetesEnclave::getEnvironment() const
{
    return m_Environment;
}

void Json_KubernetesEnclave::setEnvironment(const std::shared_ptr<Json_Environment>& value)
{
    m_Environment = value;
    m_EnvironmentIsSet = true;
}

bool Json_KubernetesEnclave::environmentIsSet() const
{
    return m_EnvironmentIsSet;
}

void Json_KubernetesEnclave::unsetEnvironment()
{
    m_EnvironmentIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getStartupCMD() const
{
    return m_StartupCMD;
}

void Json_KubernetesEnclave::setStartupCMD(const utility::string_t& value)
{
    m_StartupCMD = value;
    m_StartupCMDIsSet = true;
}

bool Json_KubernetesEnclave::startupCMDIsSet() const
{
    return m_StartupCMDIsSet;
}

void Json_KubernetesEnclave::unsetStartupCMD()
{
    m_StartupCMDIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getInternalRemoteControlServer() const
{
    return m_InternalRemoteControlServer;
}

void Json_KubernetesEnclave::setInternalRemoteControlServer(const utility::string_t& value)
{
    m_InternalRemoteControlServer = value;
    m_InternalRemoteControlServerIsSet = true;
}

bool Json_KubernetesEnclave::internalRemoteControlServerIsSet() const
{
    return m_InternalRemoteControlServerIsSet;
}

void Json_KubernetesEnclave::unsetInternalRemoteControlServer()
{
    m_InternalRemoteControlServerIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getConsoleOutput() const
{
    return m_ConsoleOutput;
}

void Json_KubernetesEnclave::setConsoleOutput(const utility::string_t& value)
{
    m_ConsoleOutput = value;
    m_ConsoleOutputIsSet = true;
}

bool Json_KubernetesEnclave::consoleOutputIsSet() const
{
    return m_ConsoleOutputIsSet;
}

void Json_KubernetesEnclave::unsetConsoleOutput()
{
    m_ConsoleOutputIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getEndingTime() const
{
    return m_EndingTime;
}

void Json_KubernetesEnclave::setEndingTime(const utility::string_t& value)
{
    m_EndingTime = value;
    m_EndingTimeIsSet = true;
}

bool Json_KubernetesEnclave::endingTimeIsSet() const
{
    return m_EndingTimeIsSet;
}

void Json_KubernetesEnclave::unsetEndingTime()
{
    m_EndingTimeIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getStartupTime() const
{
    return m_StartupTime;
}

void Json_KubernetesEnclave::setStartupTime(const utility::string_t& value)
{
    m_StartupTime = value;
    m_StartupTimeIsSet = true;
}

bool Json_KubernetesEnclave::startupTimeIsSet() const
{
    return m_StartupTimeIsSet;
}

void Json_KubernetesEnclave::unsetStartupTime()
{
    m_StartupTimeIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getRemoteControlServer() const
{
    return m_RemoteControlServer;
}

void Json_KubernetesEnclave::setRemoteControlServer(const utility::string_t& value)
{
    m_RemoteControlServer = value;
    m_RemoteControlServerIsSet = true;
}

bool Json_KubernetesEnclave::remoteControlServerIsSet() const
{
    return m_RemoteControlServerIsSet;
}

void Json_KubernetesEnclave::unsetRemoteControlServer()
{
    m_RemoteControlServerIsSet = false;
}
std::vector<std::shared_ptr<Json_EnclavePort>>& Json_KubernetesEnclave::getPorts()
{
    return m_Ports;
}

void Json_KubernetesEnclave::setPorts(const std::vector<std::shared_ptr<Json_EnclavePort>>& value)
{
    m_Ports = value;
    m_PortsIsSet = true;
}

bool Json_KubernetesEnclave::portsIsSet() const
{
    return m_PortsIsSet;
}

void Json_KubernetesEnclave::unsetPorts()
{
    m_PortsIsSet = false;
}
std::shared_ptr<Json_KubernetesEnclave> Json_KubernetesEnclave::getKubernetesEnclave() const
{
    return m_KubernetesEnclave;
}

void Json_KubernetesEnclave::setKubernetesEnclave(const std::shared_ptr<Json_KubernetesEnclave>& value)
{
    m_KubernetesEnclave = value;
    m_KubernetesEnclaveIsSet = true;
}

bool Json_KubernetesEnclave::kubernetesEnclaveIsSet() const
{
    return m_KubernetesEnclaveIsSet;
}

void Json_KubernetesEnclave::unsetKubernetesEnclave()
{
    m_KubernetesEnclaveIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getWireguardServer() const
{
    return m_WireguardServer;
}

void Json_KubernetesEnclave::setWireguardServer(const utility::string_t& value)
{
    m_WireguardServer = value;
    m_WireguardServerIsSet = true;
}

bool Json_KubernetesEnclave::wireguardServerIsSet() const
{
    return m_WireguardServerIsSet;
}

void Json_KubernetesEnclave::unsetWireguardServer()
{
    m_WireguardServerIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getInternalWireguardServer() const
{
    return m_InternalWireguardServer;
}

void Json_KubernetesEnclave::setInternalWireguardServer(const utility::string_t& value)
{
    m_InternalWireguardServer = value;
    m_InternalWireguardServerIsSet = true;
}

bool Json_KubernetesEnclave::internalWireguardServerIsSet() const
{
    return m_InternalWireguardServerIsSet;
}

void Json_KubernetesEnclave::unsetInternalWireguardServer()
{
    m_InternalWireguardServerIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getStatus() const
{
    return m_Status;
}

void Json_KubernetesEnclave::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Json_KubernetesEnclave::statusIsSet() const
{
    return m_StatusIsSet;
}

void Json_KubernetesEnclave::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getWireguardPublicKey() const
{
    return m_WireguardPublicKey;
}

void Json_KubernetesEnclave::setWireguardPublicKey(const utility::string_t& value)
{
    m_WireguardPublicKey = value;
    m_WireguardPublicKeyIsSet = true;
}

bool Json_KubernetesEnclave::wireguardPublicKeyIsSet() const
{
    return m_WireguardPublicKeyIsSet;
}

void Json_KubernetesEnclave::unsetWireguardPublicKey()
{
    m_WireguardPublicKeyIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getEnclaveIdent() const
{
    return m_EnclaveIdent;
}

void Json_KubernetesEnclave::setEnclaveIdent(const utility::string_t& value)
{
    m_EnclaveIdent = value;
    m_EnclaveIdentIsSet = true;
}

bool Json_KubernetesEnclave::enclaveIdentIsSet() const
{
    return m_EnclaveIdentIsSet;
}

void Json_KubernetesEnclave::unsetEnclaveIdent()
{
    m_EnclaveIdentIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getInternalIdent() const
{
    return m_InternalIdent;
}

void Json_KubernetesEnclave::setInternalIdent(const utility::string_t& value)
{
    m_InternalIdent = value;
    m_InternalIdentIsSet = true;
}

bool Json_KubernetesEnclave::internalIdentIsSet() const
{
    return m_InternalIdentIsSet;
}

void Json_KubernetesEnclave::unsetInternalIdent()
{
    m_InternalIdentIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getPublicIdent() const
{
    return m_PublicIdent;
}

void Json_KubernetesEnclave::setPublicIdent(const utility::string_t& value)
{
    m_PublicIdent = value;
    m_PublicIdentIsSet = true;
}

bool Json_KubernetesEnclave::publicIdentIsSet() const
{
    return m_PublicIdentIsSet;
}

void Json_KubernetesEnclave::unsetPublicIdent()
{
    m_PublicIdentIsSet = false;
}
std::shared_ptr<Json_Process> Json_KubernetesEnclave::getProcess() const
{
    return m_Process;
}

void Json_KubernetesEnclave::setProcess(const std::shared_ptr<Json_Process>& value)
{
    m_Process = value;
    m_ProcessIsSet = true;
}

bool Json_KubernetesEnclave::processIsSet() const
{
    return m_ProcessIsSet;
}

void Json_KubernetesEnclave::unsetProcess()
{
    m_ProcessIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getInternalAttesationServer() const
{
    return m_InternalAttesationServer;
}

void Json_KubernetesEnclave::setInternalAttesationServer(const utility::string_t& value)
{
    m_InternalAttesationServer = value;
    m_InternalAttesationServerIsSet = true;
}

bool Json_KubernetesEnclave::internalAttesationServerIsSet() const
{
    return m_InternalAttesationServerIsSet;
}

void Json_KubernetesEnclave::unsetInternalAttesationServer()
{
    m_InternalAttesationServerIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getSignerIdent() const
{
    return m_SignerIdent;
}

void Json_KubernetesEnclave::setSignerIdent(const utility::string_t& value)
{
    m_SignerIdent = value;
    m_SignerIdentIsSet = true;
}

bool Json_KubernetesEnclave::signerIdentIsSet() const
{
    return m_SignerIdentIsSet;
}

void Json_KubernetesEnclave::unsetSignerIdent()
{
    m_SignerIdentIsSet = false;
}
std::shared_ptr<Object> Json_KubernetesEnclave::getEnclaveInputstream() const
{
    return m_EnclaveInputstream;
}

void Json_KubernetesEnclave::setEnclaveInputstream(const std::shared_ptr<Object>& value)
{
    m_EnclaveInputstream = value;
    m_EnclaveInputstreamIsSet = true;
}

bool Json_KubernetesEnclave::enclaveInputstreamIsSet() const
{
    return m_EnclaveInputstreamIsSet;
}

void Json_KubernetesEnclave::unsetEnclaveInputstream()
{
    m_EnclaveInputstreamIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getAttestationServer() const
{
    return m_AttestationServer;
}

void Json_KubernetesEnclave::setAttestationServer(const utility::string_t& value)
{
    m_AttestationServer = value;
    m_AttestationServerIsSet = true;
}

bool Json_KubernetesEnclave::attestationServerIsSet() const
{
    return m_AttestationServerIsSet;
}

void Json_KubernetesEnclave::unsetAttestationServer()
{
    m_AttestationServerIsSet = false;
}
std::map<utility::string_t, utility::string_t>& Json_KubernetesEnclave::getPortMapping()
{
    return m_PortMapping;
}

void Json_KubernetesEnclave::setPortMapping(const std::map<utility::string_t, utility::string_t>& value)
{
    m_PortMapping = value;
    m_PortMappingIsSet = true;
}

bool Json_KubernetesEnclave::portMappingIsSet() const
{
    return m_PortMappingIsSet;
}

void Json_KubernetesEnclave::unsetPortMapping()
{
    m_PortMappingIsSet = false;
}
std::shared_ptr<Json_V1EventList> Json_KubernetesEnclave::getEnclaveReplicaSetEvents() const
{
    return m_EnclaveReplicaSetEvents;
}

void Json_KubernetesEnclave::setEnclaveReplicaSetEvents(const std::shared_ptr<Json_V1EventList>& value)
{
    m_EnclaveReplicaSetEvents = value;
    m_EnclaveReplicaSetEventsIsSet = true;
}

bool Json_KubernetesEnclave::enclaveReplicaSetEventsIsSet() const
{
    return m_EnclaveReplicaSetEventsIsSet;
}

void Json_KubernetesEnclave::unsetEnclaveReplicaSetEvents()
{
    m_EnclaveReplicaSetEventsIsSet = false;
}
int32_t Json_KubernetesEnclave::getWireguardPort() const
{
    return m_WireguardPort;
}

void Json_KubernetesEnclave::setWireguardPort(int32_t value)
{
    m_WireguardPort = value;
    m_WireguardPortIsSet = true;
}

bool Json_KubernetesEnclave::wireguardPortIsSet() const
{
    return m_WireguardPortIsSet;
}

void Json_KubernetesEnclave::unsetWireguardPort()
{
    m_WireguardPortIsSet = false;
}
int32_t Json_KubernetesEnclave::getAttestationPort() const
{
    return m_AttestationPort;
}

void Json_KubernetesEnclave::setAttestationPort(int32_t value)
{
    m_AttestationPort = value;
    m_AttestationPortIsSet = true;
}

bool Json_KubernetesEnclave::attestationPortIsSet() const
{
    return m_AttestationPortIsSet;
}

void Json_KubernetesEnclave::unsetAttestationPort()
{
    m_AttestationPortIsSet = false;
}
std::shared_ptr<Json_V1EventList> Json_KubernetesEnclave::getEnclaveDeploymentEvents() const
{
    return m_EnclaveDeploymentEvents;
}

void Json_KubernetesEnclave::setEnclaveDeploymentEvents(const std::shared_ptr<Json_V1EventList>& value)
{
    m_EnclaveDeploymentEvents = value;
    m_EnclaveDeploymentEventsIsSet = true;
}

bool Json_KubernetesEnclave::enclaveDeploymentEventsIsSet() const
{
    return m_EnclaveDeploymentEventsIsSet;
}

void Json_KubernetesEnclave::unsetEnclaveDeploymentEvents()
{
    m_EnclaveDeploymentEventsIsSet = false;
}
std::shared_ptr<Json_V1EventList> Json_KubernetesEnclave::getEnclavePodEvents() const
{
    return m_EnclavePodEvents;
}

void Json_KubernetesEnclave::setEnclavePodEvents(const std::shared_ptr<Json_V1EventList>& value)
{
    m_EnclavePodEvents = value;
    m_EnclavePodEventsIsSet = true;
}

bool Json_KubernetesEnclave::enclavePodEventsIsSet() const
{
    return m_EnclavePodEventsIsSet;
}

void Json_KubernetesEnclave::unsetEnclavePodEvents()
{
    m_EnclavePodEventsIsSet = false;
}
bool Json_KubernetesEnclave::isIsUsingInitContainer() const
{
    return m_IsUsingInitContainer;
}

void Json_KubernetesEnclave::setIsUsingInitContainer(bool value)
{
    m_IsUsingInitContainer = value;
    m_IsUsingInitContainerIsSet = true;
}

bool Json_KubernetesEnclave::isUsingInitContainerIsSet() const
{
    return m_IsUsingInitContainerIsSet;
}

void Json_KubernetesEnclave::unsetIsUsingInitContainer()
{
    m_IsUsingInitContainerIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getPodPhase() const
{
    return m_PodPhase;
}

void Json_KubernetesEnclave::setPodPhase(const utility::string_t& value)
{
    m_PodPhase = value;
    m_PodPhaseIsSet = true;
}

bool Json_KubernetesEnclave::podPhaseIsSet() const
{
    return m_PodPhaseIsSet;
}

void Json_KubernetesEnclave::unsetPodPhase()
{
    m_PodPhaseIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getDebugInfo() const
{
    return m_DebugInfo;
}

void Json_KubernetesEnclave::setDebugInfo(const utility::string_t& value)
{
    m_DebugInfo = value;
    m_DebugInfoIsSet = true;
}

bool Json_KubernetesEnclave::debugInfoIsSet() const
{
    return m_DebugInfoIsSet;
}

void Json_KubernetesEnclave::unsetDebugInfo()
{
    m_DebugInfoIsSet = false;
}
utility::string_t Json_KubernetesEnclave::getRemoteControlIP() const
{
    return m_RemoteControlIP;
}

void Json_KubernetesEnclave::setRemoteControlIP(const utility::string_t& value)
{
    m_RemoteControlIP = value;
    m_RemoteControlIPIsSet = true;
}

bool Json_KubernetesEnclave::remoteControlIPIsSet() const
{
    return m_RemoteControlIPIsSet;
}

void Json_KubernetesEnclave::unsetRemoteControlIP()
{
    m_RemoteControlIPIsSet = false;
}
}
}
}
}


