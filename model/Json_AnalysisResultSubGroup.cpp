/**
 * madana-api
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Json_AnalysisResultSubGroup.h"

namespace com {
namespace madana {
namespace client {
namespace model {




Json_AnalysisResultSubGroup::Json_AnalysisResultSubGroup()
{
    m_Filter = utility::conversions::to_string_t("");
    m_FilterIsSet = false;
}

Json_AnalysisResultSubGroup::~Json_AnalysisResultSubGroup()
{
}

void Json_AnalysisResultSubGroup::validate()
{
    // TODO: implement validation
}

web::json::value Json_AnalysisResultSubGroup::toJson() const
{
    web::json::value val = this->Json_AnalysisResult::toJson();
    
    if(m_FilterIsSet)
    {
        val[utility::conversions::to_string_t("filter")] = ModelBase::toJson(m_Filter);
    }

    return val;
}

bool Json_AnalysisResultSubGroup::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->Json_AnalysisResult::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("filter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("filter"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_filter;
            ok &= ModelBase::fromJson(fieldValue, refVal_filter);
            setFilter(refVal_filter);
        }
    }
    return ok;
}

void Json_AnalysisResultSubGroup::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_RawBytesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rawBytes"), m_RawBytes));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_SubGroupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subGroups"), m_SubGroups));
    }
    if(m_VisualizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("visualization"), m_Visualization));
    }
    if(m_FilterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filter"), m_Filter));
    }
}

bool Json_AnalysisResultSubGroup::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("rawBytes")))
    {
        utility::string_t refVal_rawBytes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rawBytes")), refVal_rawBytes );
        setRawBytes(refVal_rawBytes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subGroups")))
    {
        std::vector<std::shared_ptr<Json_AnalysisResultSubGroup>> refVal_subGroups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subGroups")), refVal_subGroups );
        setSubGroups(refVal_subGroups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("visualization")))
    {
        std::shared_ptr<Json_AnalysisVisualization> refVal_visualization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("visualization")), refVal_visualization );
        setVisualization(refVal_visualization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("filter")))
    {
        utility::string_t refVal_filter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("filter")), refVal_filter );
        setFilter(refVal_filter);
    }
    return ok;
}

utility::string_t Json_AnalysisResultSubGroup::getFilter() const
{
    return m_Filter;
}

void Json_AnalysisResultSubGroup::setFilter(const utility::string_t& value)
{
    m_Filter = value;
    m_FilterIsSet = true;
}

bool Json_AnalysisResultSubGroup::filterIsSet() const
{
    return m_FilterIsSet;
}

void Json_AnalysisResultSubGroup::unsetFilter()
{
    m_FilterIsSet = false;
}
}
}
}
}


