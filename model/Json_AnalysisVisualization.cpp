/**
 * madana-api
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Json_AnalysisVisualization.h"

namespace com {
namespace madana {
namespace client {
namespace model {




Json_AnalysisVisualization::Json_AnalysisVisualization()
{
    m_Function = utility::conversions::to_string_t("");
    m_FunctionIsSet = false;
    m_ParametersIsSet = false;
    m_Scriptsrc = utility::conversions::to_string_t("");
    m_ScriptsrcIsSet = false;
}

Json_AnalysisVisualization::~Json_AnalysisVisualization()
{
}

void Json_AnalysisVisualization::validate()
{
    // TODO: implement validation
}

web::json::value Json_AnalysisVisualization::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FunctionIsSet)
    {
        val[utility::conversions::to_string_t("function")] = ModelBase::toJson(m_Function);
    }
    if(m_ParametersIsSet)
    {
        val[utility::conversions::to_string_t("parameters")] = ModelBase::toJson(m_Parameters);
    }
    if(m_ScriptsrcIsSet)
    {
        val[utility::conversions::to_string_t("scriptsrc")] = ModelBase::toJson(m_Scriptsrc);
    }

    return val;
}

bool Json_AnalysisVisualization::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("function")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("function"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_function;
            ok &= ModelBase::fromJson(fieldValue, refVal_function);
            setFunction(refVal_function);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameters")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameters"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_parameters;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameters);
            setParameters(refVal_parameters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scriptsrc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("scriptsrc"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_scriptsrc;
            ok &= ModelBase::fromJson(fieldValue, refVal_scriptsrc);
            setScriptsrc(refVal_scriptsrc);
        }
    }
    return ok;
}

void Json_AnalysisVisualization::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FunctionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("function"), m_Function));
    }
    if(m_ParametersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), m_Parameters));
    }
    if(m_ScriptsrcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("scriptsrc"), m_Scriptsrc));
    }
}

bool Json_AnalysisVisualization::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("function")))
    {
        utility::string_t refVal_function;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("function")), refVal_function );
        setFunction(refVal_function);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
    {
        std::vector<utility::string_t> refVal_parameters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters")), refVal_parameters );
        setParameters(refVal_parameters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scriptsrc")))
    {
        utility::string_t refVal_scriptsrc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("scriptsrc")), refVal_scriptsrc );
        setScriptsrc(refVal_scriptsrc);
    }
    return ok;
}

utility::string_t Json_AnalysisVisualization::getFunction() const
{
    return m_Function;
}

void Json_AnalysisVisualization::setFunction(const utility::string_t& value)
{
    m_Function = value;
    m_FunctionIsSet = true;
}

bool Json_AnalysisVisualization::functionIsSet() const
{
    return m_FunctionIsSet;
}

void Json_AnalysisVisualization::unsetFunction()
{
    m_FunctionIsSet = false;
}
std::vector<utility::string_t>& Json_AnalysisVisualization::getParameters()
{
    return m_Parameters;
}

void Json_AnalysisVisualization::setParameters(const std::vector<utility::string_t>& value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}

bool Json_AnalysisVisualization::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void Json_AnalysisVisualization::unsetParameters()
{
    m_ParametersIsSet = false;
}
utility::string_t Json_AnalysisVisualization::getScriptsrc() const
{
    return m_Scriptsrc;
}

void Json_AnalysisVisualization::setScriptsrc(const utility::string_t& value)
{
    m_Scriptsrc = value;
    m_ScriptsrcIsSet = true;
}

bool Json_AnalysisVisualization::scriptsrcIsSet() const
{
    return m_ScriptsrcIsSet;
}

void Json_AnalysisVisualization::unsetScriptsrc()
{
    m_ScriptsrcIsSet = false;
}
}
}
}
}


