/**
 * madana-api
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Json_DatasetInfo.h"

namespace com {
namespace madana {
namespace client {
namespace model {




Json_DatasetInfo::Json_DatasetInfo()
{
    m_Size = utility::conversions::to_string_t("");
    m_SizeIsSet = false;
    m_Hash = utility::conversions::to_string_t("");
    m_HashIsSet = false;
    m_Creationdate = utility::conversions::to_string_t("");
    m_CreationdateIsSet = false;
    m_Fingerprint = utility::conversions::to_string_t("");
    m_FingerprintIsSet = false;
}

Json_DatasetInfo::~Json_DatasetInfo()
{
}

void Json_DatasetInfo::validate()
{
    // TODO: implement validation
}

web::json::value Json_DatasetInfo::toJson() const
{
    web::json::value val = this->Json_SignedData::toJson();
    
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t("size")] = ModelBase::toJson(m_Size);
    }
    if(m_HashIsSet)
    {
        val[utility::conversions::to_string_t("hash")] = ModelBase::toJson(m_Hash);
    }
    if(m_CreationdateIsSet)
    {
        val[utility::conversions::to_string_t("creationdate")] = ModelBase::toJson(m_Creationdate);
    }
    if(m_FingerprintIsSet)
    {
        val[utility::conversions::to_string_t("fingerprint")] = ModelBase::toJson(m_Fingerprint);
    }

    return val;
}

bool Json_DatasetInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    ok &= this->Json_SignedData::fromJson(val);
    
    if(val.has_field(utility::conversions::to_string_t("size")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("size"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_size;
            ok &= ModelBase::fromJson(fieldValue, refVal_size);
            setSize(refVal_size);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hash")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hash"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_hash;
            ok &= ModelBase::fromJson(fieldValue, refVal_hash);
            setHash(refVal_hash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("creationdate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("creationdate"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_creationdate;
            ok &= ModelBase::fromJson(fieldValue, refVal_creationdate);
            setCreationdate(refVal_creationdate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fingerprint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fingerprint"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fingerprint;
            ok &= ModelBase::fromJson(fieldValue, refVal_fingerprint);
            setFingerprint(refVal_fingerprint);
        }
    }
    return ok;
}

void Json_DatasetInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FingerpintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fingerpint"), m_Fingerpint));
    }
    if(m_SignatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signature"), m_Signature));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("data"), m_Data));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("size"), m_Size));
    }
    if(m_HashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hash"), m_Hash));
    }
    if(m_CreationdateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("creationdate"), m_Creationdate));
    }
    if(m_FingerprintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fingerprint"), m_Fingerprint));
    }
}

bool Json_DatasetInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("fingerpint")))
    {
        utility::string_t refVal_fingerpint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fingerpint")), refVal_fingerpint );
        setFingerpint(refVal_fingerpint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("signature")))
    {
        utility::string_t refVal_signature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("signature")), refVal_signature );
        setSignature(refVal_signature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("data")))
    {
        utility::string_t refVal_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("data")), refVal_data );
        setData(refVal_data);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("size")))
    {
        utility::string_t refVal_size;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("size")), refVal_size );
        setSize(refVal_size);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hash")))
    {
        utility::string_t refVal_hash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hash")), refVal_hash );
        setHash(refVal_hash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("creationdate")))
    {
        utility::string_t refVal_creationdate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("creationdate")), refVal_creationdate );
        setCreationdate(refVal_creationdate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fingerprint")))
    {
        utility::string_t refVal_fingerprint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fingerprint")), refVal_fingerprint );
        setFingerprint(refVal_fingerprint);
    }
    return ok;
}

utility::string_t Json_DatasetInfo::getSize() const
{
    return m_Size;
}

void Json_DatasetInfo::setSize(const utility::string_t& value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool Json_DatasetInfo::sizeIsSet() const
{
    return m_SizeIsSet;
}

void Json_DatasetInfo::unsetSize()
{
    m_SizeIsSet = false;
}
utility::string_t Json_DatasetInfo::getHash() const
{
    return m_Hash;
}

void Json_DatasetInfo::setHash(const utility::string_t& value)
{
    m_Hash = value;
    m_HashIsSet = true;
}

bool Json_DatasetInfo::hashIsSet() const
{
    return m_HashIsSet;
}

void Json_DatasetInfo::unsetHash()
{
    m_HashIsSet = false;
}
utility::string_t Json_DatasetInfo::getCreationdate() const
{
    return m_Creationdate;
}

void Json_DatasetInfo::setCreationdate(const utility::string_t& value)
{
    m_Creationdate = value;
    m_CreationdateIsSet = true;
}

bool Json_DatasetInfo::creationdateIsSet() const
{
    return m_CreationdateIsSet;
}

void Json_DatasetInfo::unsetCreationdate()
{
    m_CreationdateIsSet = false;
}
utility::string_t Json_DatasetInfo::getFingerprint() const
{
    return m_Fingerprint;
}

void Json_DatasetInfo::setFingerprint(const utility::string_t& value)
{
    m_Fingerprint = value;
    m_FingerprintIsSet = true;
}

bool Json_DatasetInfo::fingerprintIsSet() const
{
    return m_FingerprintIsSet;
}

void Json_DatasetInfo::unsetFingerprint()
{
    m_FingerprintIsSet = false;
}
}
}
}
}


