/**
 * madana-api
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Json_NodeInfo.h
 *
 * 
 */

#ifndef COM_MADANA_CLIENT_MODEL_Json_NodeInfo_H_
#define COM_MADANA_CLIENT_MODEL_Json_NodeInfo_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace madana {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Json_NodeInfo
    : public ModelBase
{
public:
    Json_NodeInfo();
    virtual ~Json_NodeInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Json_NodeInfo members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHardwareBaseboard() const;
    bool hardwareBaseboardIsSet() const;
    void unsetHardwareBaseboard();

    void setHardwareBaseboard(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPublicKey() const;
    bool publicKeyIsSet() const;
    void unsetPublicKey();

    void setPublicKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMemory() const;
    bool memoryIsSet() const;
    void unsetMemory();

    void setMemory(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getProcessors();
    bool processorsIsSet() const;
    void unsetProcessors();

    void setProcessors(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCpuLogicalCount() const;
    bool cpuLogicalCountIsSet() const;
    void unsetCpuLogicalCount();

    void setCpuLogicalCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConnectionURL() const;
    bool connectionURLIsSet() const;
    void unsetConnectionURL();

    void setConnectionURL(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOperatingSystem() const;
    bool operatingSystemIsSet() const;
    void unsetOperatingSystem();

    void setOperatingSystem(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCpuPhysicalCores() const;
    bool cpuPhysicalCoresIsSet() const;
    void unsetCpuPhysicalCores();

    void setCpuPhysicalCores(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getOperatingSystemUptime() const;
    bool operatingSystemUptimeIsSet() const;
    void unsetOperatingSystemUptime();

    void setOperatingSystemUptime(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCpuModel() const;
    bool cpuModelIsSet() const;
    void unsetCpuModel();

    void setCpuModel(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOwner() const;
    bool ownerIsSet() const;
    void unsetOwner();

    void setOwner(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCpuFamily() const;
    bool cpuFamilyIsSet() const;
    void unsetCpuFamily();

    void setCpuFamily(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCpuFrequency() const;
    bool cpuFrequencyIsSet() const;
    void unsetCpuFrequency();

    void setCpuFrequency(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHardwareFirmware() const;
    bool hardwareFirmwareIsSet() const;
    void unsetHardwareFirmware();

    void setHardwareFirmware(const utility::string_t& value);


protected:
    utility::string_t m_HardwareBaseboard;
    bool m_HardwareBaseboardIsSet;
    utility::string_t m_PublicKey;
    bool m_PublicKeyIsSet;
    utility::string_t m_Memory;
    bool m_MemoryIsSet;
    std::vector<utility::string_t> m_Processors;
    bool m_ProcessorsIsSet;
    int32_t m_CpuLogicalCount;
    bool m_CpuLogicalCountIsSet;
    utility::string_t m_ConnectionURL;
    bool m_ConnectionURLIsSet;
    utility::string_t m_OperatingSystem;
    bool m_OperatingSystemIsSet;
    int32_t m_CpuPhysicalCores;
    bool m_CpuPhysicalCoresIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    double m_OperatingSystemUptime;
    bool m_OperatingSystemUptimeIsSet;
    utility::string_t m_CpuModel;
    bool m_CpuModelIsSet;
    utility::string_t m_Owner;
    bool m_OwnerIsSet;
    utility::string_t m_CpuFamily;
    bool m_CpuFamilyIsSet;
    utility::string_t m_CpuFrequency;
    bool m_CpuFrequencyIsSet;
    utility::string_t m_HardwareFirmware;
    bool m_HardwareFirmwareIsSet;
};


}
}
}
}

#endif /* COM_MADANA_CLIENT_MODEL_Json_NodeInfo_H_ */
