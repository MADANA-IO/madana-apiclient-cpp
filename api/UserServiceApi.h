/**
 * madana-api
 * <h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>
 *
 * The version of the OpenAPI document: 0.4.12
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserServiceApi.h
 *
 * 
 */

#ifndef   COM_MADANA_CLIENT_API_UserServiceApi_H_
#define   COM_MADANA_CLIENT_API_UserServiceApi_H_


#include "../ApiClient.h"

#include "HttpContent.h"
#include "Json_MDN_User.h"
#include "Json_MDN_UserProfileImage.h"
#include "Json_MDN_UserSetting.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace   com {
namespace madana {
namespace client {
namespace api {

using namespace com::madana::client::model;



class  UserServiceApi 
{
public:

    explicit UserServiceApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~UserServiceApi();

    /// <summary>
    /// Creates a new user object.
    /// </summary>
    /// <remarks>
    /// Creates a new user object
    /// </remarks>
    /// <param name="referrer"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="body">provided user object inheriting properties and credentials (optional)</param>
    pplx::task<std::shared_ptr<HttpContent>> createObject2(
        boost::optional<utility::string_t> referrer,
        boost::optional<std::shared_ptr<Json_MDN_User>> body
    ) const;
    /// <summary>
    /// Deletes an User based on the provided id and securitycontext.
    /// </summary>
    /// <remarks>
    /// Deletes an User based on the provided id and securitycontext
    /// </remarks>
    /// <param name="username"></param>
    pplx::task<std::shared_ptr<HttpContent>> deleteObject(
        utility::string_t username
    ) const;
    /// <summary>
    /// Deletes linked account from the user and securitycontext.
    /// </summary>
    /// <remarks>
    /// Deletes linked account from the user and securitycontext
    /// </remarks>
    /// <param name="ident"></param>
    /// <param name="platform"></param>
    /// <param name="username"></param>
    pplx::task<std::shared_ptr<HttpContent>> deleteObject_0(
        utility::string_t ident,
        utility::string_t platform,
        utility::string_t username
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="username"></param>
    pplx::task<std::shared_ptr<HttpContent>> getAvatars(
        utility::string_t username
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="username"></param>
    pplx::task<std::shared_ptr<HttpContent>> getCertificates(
        utility::string_t username
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="username"></param>
    pplx::task<std::shared_ptr<HttpContent>> getObject2(
        utility::string_t username
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="username"></param>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<HttpContent>> setAvatar(
        utility::string_t username,
        boost::optional<std::shared_ptr<Json_MDN_UserProfileImage>> body
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="username"></param>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<HttpContent>> setSettings(
        utility::string_t username,
        boost::optional<std::shared_ptr<Json_MDN_UserSetting>> body
    ) const;
    /// <summary>
    /// Updates Userproperties based on the provided user object.
    /// </summary>
    /// <remarks>
    /// Updates Userproperties based on the provided user object
    /// </remarks>
    /// <param name="username"></param>
    /// <param name="body">the new user object inherting all properties that should be change (optional)</param>
    pplx::task<std::shared_ptr<HttpContent>> updateObject2(
        utility::string_t username,
        boost::optional<std::shared_ptr<Json_MDN_User>> body
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /*   COM_MADANA_CLIENT_API_UserServiceApi_H_ */

