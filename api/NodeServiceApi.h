/**
 * madana-api
 * <h1>Using the madana-api</h1>        <p>This documentation contains a Quickstart Guide, relating client functionality and information about the available         endpoints and used datamodels.   </p>       <p> The madana-api and its implementations are still in heavy development. This means that there may be problems in our protocols, or there may be mistakes in our implementations. We take security vulnerabilities very seriously. If you discover a security issue, please bring it to our attention right away! If you find a vulnerability that may affect live deployments -- for example, by exposing a remote execution exploit -- please send your report privately to info@madana.io. Please DO NOT file a public issue. If the issue is a protocol weakness that cannot be immediately exploited or something not yet deployed, just discuss it openly   </p>   <br>   <p> Note: Not all functionality might be acessible without having accquired and api-license token. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a> </p>       <br>
 *
 * The version of the OpenAPI document: 0.5.0-master.55
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * NodeServiceApi.h
 *
 * 
 */

#ifndef   COM_MADANA_APICLIENT_API_NodeServiceApi_H_
#define   COM_MADANA_APICLIENT_API_NodeServiceApi_H_


#include "../ApiClient.h"

#include "HttpContent.h"
#include "Json_NodeInfo.h"
#include "Json_NodeRunRequest.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace   com {
namespace madana {
namespace apiclient {
namespace api {

using namespace com::madana::apiclient::model;



class  NodeServiceApi 
{
public:

    explicit NodeServiceApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~NodeServiceApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<HttpContent>> createNode(
        boost::optional<std::shared_ptr<Json_NodeRunRequest>> body
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<HttpContent>> getBootstrap(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="active"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<HttpContent>> getNodeLicenses(
        boost::optional<utility::string_t> active
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="ident"></param>
    pplx::task<std::shared_ptr<HttpContent>> getNodeV2(
        utility::string_t ident
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="owner"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<HttpContent>> getNodes2(
        boost::optional<utility::string_t> owner
    ) const;
    /// <summary>
    /// Returns UUIDs of existing analyses.
    /// </summary>
    /// <remarks>
    /// Returns UUIDs of existing analyses.
    /// </remarks>
    /// <param name="authorization">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="created">- if Queryparam \&quot;created&#x3D;true\&quot; only the UUIDs of own Requests are shown (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Used for offset pagination. Limit/Offset Paging would look like GET /request?limit&#x3D;20&amp;offset&#x3D;100. This query would return the 20 rows starting with the 100th row (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="offset">Used for offset pagination. Limit/Offset Paging would look like GET /request?limit&#x3D;20&amp;offset&#x3D;100. This query would return the 20 rows starting with the 100th row (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="status"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<HttpContent>> getNodesV2(
        boost::optional<utility::string_t> authorization,
        boost::optional<utility::string_t> created,
        boost::optional<utility::string_t> limit,
        boost::optional<utility::string_t> offset,
        boost::optional<utility::string_t> status
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="ident"></param>
    pplx::task<std::shared_ptr<HttpContent>> killNode(
        utility::string_t ident
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<HttpContent>> postNodeInfo(
        boost::optional<std::shared_ptr<Json_NodeInfo>> body
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<HttpContent>> postNodeInfo_0(
        boost::optional<std::shared_ptr<Json_NodeRunRequest>> body
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /*   COM_MADANA_APICLIENT_API_NodeServiceApi_H_ */

